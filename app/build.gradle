apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-allopen'
apply plugin: 'androidx.navigation.safeargs.kotlin'
apply plugin: 'com.vanniktech.android.junit.jacoco'
apply plugin: 'io.fabric'

allOpen {
    // allows mocking for classes w/o directly opening them for release builds
    annotation 'com.vmadalin.core.annotations.OpenClass'
}

android {
    buildToolsVersion = androidConfig.buildToolsVersion
    compileSdkVersion androidConfig.compileSdkVersion
    defaultConfig {
        applicationId androidConfig.applicationId
        minSdkVersion androidConfig.minSdkVersion
        targetSdkVersion androidConfig.targetSdkVersion
        versionCode androidConfig.versionCode
        versionName androidConfig.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArgument "listener", "leakcanary.FailTestOnLeakRunListener"
    }
    buildTypes {
        debug {
            applicationIdSuffix '.debug'
            versionNameSuffix '-DEBUG'
            testCoverageEnabled true

            ext.enableCrashlytics = false
            buildConfigField "boolean", "ENABLE_CRASHLYTICS", "false"
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            ext.enableCrashlytics = true
            buildConfigField "boolean", "ENABLE_CRASHLYTICS", "true"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }
    dataBinding {
        enabled = true
    }
    androidExtensions {
        experimental = true
    }
    lintOptions {
        disable 'GoogleAppIndexingWarning'
        checkAllWarnings true
        //warningsAsErrors true
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
    dynamicFeatures = [
        ":features:characters_list",
        ":features:characters_favorites",
        ":features:dashboard"
    ]
}

junitJacoco {
    jacocoVersion = '0.8.4'
    includeNoLocationClasses = true
}

afterEvaluate {
    initCrashlyticsPropertiesIfNeeded()
}

dependencies {
    implementation project(':core')

    kaptDependencies.each { _, url -> kapt url }
    projectDependencies.each { _, url -> implementation url }
    debugDependencies.each { _, url -> debugImplementation url }
    testImplementationDependencies.each { _, url -> testImplementation url }
    androidTestImplementationDependencies.each { _, url -> androidTestImplementation url }
}

def initCrashlyticsPropertiesIfNeeded() {
    def propertiesFile = file('fabric.properties')
    if (!propertiesFile.exists()) {
        def commentMessage = "This is autogenerated crashlytics property from system environment to prevent key to be committed to source control."
        ant.propertyfile(file: "fabric.properties", comment: commentMessage) {
            entry(key: "apiSecret", value: getLocalProperty("fabric.secret"))
            entry(key: "apiKey", value: getLocalProperty("fabric.key"))
        }
    }
}
